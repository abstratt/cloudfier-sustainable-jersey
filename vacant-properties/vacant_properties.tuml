package vacant_properties;

class Property
    attribute streetAddress : String;
    attribute city : String;
    attribute zipCode : String[0,1];
    attribute kind : PropertyKind;
    reference bids : PropertyBid[*] opposite \property;
    attribute status : PropertyStatus;
    readonly attribute winningBid : PropertyBid[0,1];
    
    operation bid(offer : Integer, purpose : Memo, bidder : Citizen := { (System#user() as Citizen) }) : PropertyBid;
    begin
        return PropertyBid#bid(self, bidder, offer, purpose);
    end;
    
    private operation sold(winningBid : PropertyBid);
    begin
        self.winningBid := winningBid;
        self.bids.forEach((it : PropertyBid) {
        	send PropertySold() to it; 
    	});
    end;
    
    statemachine PropertyStatus
        initial state Available 
            transition on call(sold) to Sold;
        end;
        state Sold end;
    end;

    static query totalSold() : Integer;
    begin
        return Property#propertiesSold().sum((p : Property) : Integer { p.winningBid.offer });
    end;

    
    static query propertiesAvailable() : Property[*];
    begin
	    return Property extent.select((p : Property) : Boolean { p.status == PropertyStatus#Available });
    end;
    static query propertiesSold() : Property[*];
    begin
	    return Property extent.select((p : Property) : Boolean { p.status == PropertyStatus#Sold });
    end;

end;

signal PropertySold
end;

class PropertyKind
    attribute name : String;
end;

class PropertyBid
    derived attribute summary : String := { "$" + self.offer.toString() + " by " + self.bidder.name };
    readonly attribute bidder : Citizen;
    readonly attribute \property : Property;    
    readonly attribute offer : Integer;
    readonly attribute purpose : Memo;
    readonly attribute bidDate : Date := { Date#today() };
    readonly attribute completionDate : Date[0,1];    
    attribute status : BidStatus;
    
    static query byProperty(\property : Property) : PropertyBid[*];
    begin
        return PropertyBid extent.select((b : PropertyBid) : Boolean {
        	b.\property == \property
        });
    end;

	(* Withdraw this bid. *)
    operation withdraw();

    (* Accept this bid. All other bids will be rejected. *)
    operation accept();
    begin
        send PropertySold() to self.\property;
    end;
    private static operation bid(
    	propertyToBidOn : Property, 
    	bidder : Citizen,
    	offer : Integer,
    	purpose : Memo) : PropertyBid;
    begin
        var bid : PropertyBid;
        bid := new PropertyBid;
        bid.bidder := bidder;
        bid.\property := propertyToBidOn;
        bid.purpose := purpose;
        bid.offer := offer;
        return bid;
    end;
    
    statemachine BidStatus
        initial state Active 
            transition on call(accept) to Accepted;
            transition on call(withdraw) to Withdrawn;
            transition on signal(PropertySold) to Rejected;  
        end;
        
        state Accepted
            entry {
            	self.\property.sold(self);
                self.completionDate := Date#today();
            };
        end;
        
        state Withdrawn
            entry {
            	self.completionDate := Date#today();
            };
        end;
        
        state Rejected 
            entry {
            	self.completionDate := Date#today();
            };
        end;
    end;
end;


association
    role \property : Property[*];
    role Property.kind;
end;

role class Citizen
    attribute name : String;
end;


end.